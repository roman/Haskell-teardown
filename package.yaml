name: teardown
version: '0.4.1.0'
synopsis: Build safe and composable teardown sub-routines for resources
description: |
  The teardown library allows you to reliably execute cleanup sub-routines for
  allocated resources. When a program is initialized, it:

  * Ensures that teardown sub-routines are executed /exactly/ once

  * Ensures that if errors occur on the execution of a Teardown sub-routine, the
    error does not propagate to others; bulkheading failure on cleanup.

  * Requires every sub-routine to be documented at creation time; thus helping
    tracing your application structure.

  * Allows tracing the teardown of your application, how is structured, how much
    time it takes to execute, and what component (if any) failed to finalize.

category: System
author: Roman Gonzalez
maintainer: open-source@roman-gonzalez.info
copyright: Â© 2017, 2018 Roman Gonzalez
license: MIT
github: roman/Haskell-teardown
tested-with: GHC==8.0.1 GHC==8.0.2 GHC==8.2.1
extra-source-files:
- README.md
- CHANGELOG.md

ghc-options:
- -Wall
# as recommended in:
# https://functor.tokyo/blog/2017-07-28-ghc-warnings-you-should-enable
- -Wincomplete-uni-patterns
- -Wincomplete-record-updates

dependencies:
- base >=4.8 && <5
- rio >= 0.0.0.0
- unliftio >= 0.2.4.0
- typed-process >= 0.1.0.0

library:
  source-dirs: src
  exposed-modules:
  - Control.Teardown
  other-modules:
  - Control.Teardown.Internal.Types
  - Control.Teardown.Internal.Core
  - Control.Teardown.Internal.Printer
  dependencies:
  - ansi-wl-pprint >=0.6.7.3

tests:
  teardown-test:
    main: TestSuite.hs
    source-dirs: test/tasty
    ghc-options:
    - -threaded
    - -rtsopts
    - -with-rtsopts=-N
    dependencies:
    - tasty >=0.11
    - tasty-hunit >=0.9.2
    - teardown

benchmarks:
  teardown-benchmark:
    main: Main.hs
    source-dirs: benchmark
    ghc-options:
    - -threaded
    - -rtsopts
    - -with-rtsopts=-N
    dependencies:
    - gauge >=0.1.3
    - teardown
stability: alpha (experimental)
